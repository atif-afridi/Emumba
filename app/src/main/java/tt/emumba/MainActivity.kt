package tt.emumba

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.BlendMode.Companion.Color
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.flow.flowOf
import org.koin.androidx.compose.koinViewModel
import org.koin.compose.KoinApplication
import tt.emumba.presentation.viewmodels.NotesViewModel
import org.koin.androidx.viewmodel.ext.android.viewModel
import tt.emumba.composeable.LabelSelectorBar
import tt.emumba.composeable.ProductItemsContainer
import tt.emumba.di.viewModels
import tt.emumba.domain.model.Category
import tt.emumba.domain.model.Note
import tt.emumba.ui.constants.OverlappingHeight
import tt.emumba.ui.theme.EmumbaMVVMTheme

class MainActivity : ComponentActivity() {

    private val viewModel: NotesViewModel by viewModel()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        /*viewModel.notes.observe(this) { notes ->
            // Update UI with notes

        }
        // Example to add a new note
        viewModel.addNote(
            Note(
                id = 0, // Auto-generated by the database
                title = "Sample Note",
                content = "This is a sample note."
            )
        )*/

        setContent {
            EmumbaMVVMTheme {
                Scaffold(modifier = Modifier.padding(top = 10.dp, bottom = 10.dp)) { innerPadding ->
//                    NotesScreen()

                    Column {
                        Row {
                            val context = LocalContext.current
                            LabelSelectorBar(
//                                labelItems = listOf(
//                                    "All", "Pop", "Rock", "Jazz", "Hip Hop", "Classical"
//                                ),
                                labelItems = listOf(
                                    Category(name = "All", initialSelectedValue = true),
                                    Category(name = "Pop"),
                                    Category(name = "Rock"),
                                    Category(name = "Jazz"),
                                    Category(name = "Hip Hop"),
                                    Category(name = "Classical")
//                                    "All", "Pop", "Rock", "Jazz", "Hip Hop", "Classical"
                                ),
                                barHeight = 80.dp,
                                horizontalPadding = 12.dp,
                                distanceBetweenItems = 8.dp,
                                backgroundColor = Color(0xFFB2F0AD),
                                selectedBackgroundColor = Color(0xFF294D16),
                                textColor = Color(0xFF333333),
                                selectedTextColor = Color(0xFFD8D1D1),
                                roundedCornerShapeSize = 24.dp,
                                labelVerticalPadding = 14.dp,
                                labelHorizontalPadding = 18.dp,
                                onCategoryClick = {category->
                                    Toast.makeText(context, "This is a Toast. Yay! ${category.name}", Toast.LENGTH_SHORT).show()
                                    // change the product list on this click...

                                }
                            )
                        }
                        Column {
                            ProductItemsContainer(
                                // 1. Mock Data for Todo Items
                                todoItemsFlow = flowOf(
                                    listOf(
                                        Note(title = "Todo Item 1"),
                                        Note(title = "Todo Item 2", isDone = true),
                                        Note(title = "Todo Item 3"),
                                        Note(title = "Todo Item 4", isDone = true),
                                        Note(title = "Todo Item 5"),
                                        Note(title = "Todo Item 6"),
                                        Note(title = "Todo Item 7"),
                                        Note(title = "Todo Item 8"),
                                        Note(title = "Todo Item 9"),
                                        Note(title = "Todo Item 10"),
                                        Note(title = "Todo Item 11", isDone = true),
                                        Note(title = "Todo Item 12"),
                                        Note(title = "Todo Item 13"),
                                        Note(title = "Todo Item 14"),
                                        Note(title = "Todo Item 15")
                                    )
                                ),
                                onItemClick = {},
                                onItemDelete = {},
                                // 2. Space Adjustment for Overlapping UI Elements
                                overlappingElementsHeight = OverlappingHeight
                            )
                        }
                    }


                }
            }
        }
    }
}

@Composable
fun NotesScreen(
    viewModel: NotesViewModel = koinViewModel()
) {
    val notes by viewModel.notes.collectAsState()
    NotesList(notes = notes)
}

@Composable
fun NotesList(notes: List<Note>) {
    LazyColumn(modifier = Modifier.fillMaxSize()) {
        items(notes) { note ->
            NoteItem(note = note)
        }
    }
}

@Composable
fun NoteItem(note: Note) {
    Text(
        text = note.title,
        style = MaterialTheme.typography.bodyLarge
    )
}

@Preview
@Composable
fun MainScreenPreview() {
    KoinApplication(
        application = { modules(viewModels) },
        content = { NotesScreen(viewModel = koinViewModel()) }
    )
//    NotesScreen()
}


//@Preview(showBackground = true)
//@Composable
//fun GreetingPreview(vm : NotesViewModel = koinViewModel()) {
////    CleanArchMVVMTheme {
////        NotesScreen()
////    }
//    KoinApplication(application = {
//        // your preview config here
//        modules(previewModule)
//    }) {
//        // Compose to preview with Koin
//    }
//}